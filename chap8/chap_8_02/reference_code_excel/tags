!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Cell	excel_utility.cc	/^Cell::Cell(int x, int y, Table* table) : x(x), y(y), table(table) {}$/;"	f	class:MyExcel::Cell
Cell	utility.h	/^class Cell {$/;"	c	namespace:MyExcel
DateCell	excel_utility.cc	/^DateCell::DateCell(std::string s, int x, int y, Table* t) $/;"	f	class:MyExcel::DateCell
DateCell	utility.h	/^class DateCell : public Cell {$/;"	c	namespace:MyExcel
ExprCell	utility.h	/^class ExprCell : public Cell {$/;"	c	namespace:MyExcel
MyExcel	excel_utility.cc	/^namespace MyExcel {$/;"	n	file:
MyExcel	utility.h	/^namespace MyExcel{$/;"	n
Node	utility.h	/^		Node(Node* prev, double s) : prev(prev), s(s) {}$/;"	f	struct:MyExcel::NumStack::Node
Node	utility.h	/^		Node(Node* prev, std::string s) : prev(prev), s(s) {}$/;"	f	struct:MyExcel::Stack::Node
Node	utility.h	/^	struct Node {$/;"	s	class:MyExcel::NumStack
Node	utility.h	/^	struct Node {$/;"	s	class:MyExcel::Stack
NumStack	excel_utility.cc	/^NumStack::NumStack() : start(NULL, 0) { current = &start; }$/;"	f	class:MyExcel::NumStack
NumStack	utility.h	/^class NumStack {$/;"	c	namespace:MyExcel
NumberCell	excel_utility.cc	/^NumberCell:NumberCell(int data, int x, int y, Table* t) $/;"	f	namespace:MyExcel
NumberCell	utility.h	/^class NumberCell : public Cell {$/;"	c	namespace:MyExcel
Stack	excel_utility.cc	/^Stack::Stack() : start(NULL, "") { current = &start; }$/;"	f	class:MyExcel::Stack
Stack	utility.h	/^class Stack {$/;"	c	namespace:MyExcel
StringCell	excel_utility.cc	/^StringCell::StringCell(std::string data, int x, int y, Table* t) : data(data), Cell(x, y, t) {}$/;"	f	class:MyExcel::StringCell
Table	excel_utility.cc	/^Table::Table(int max_row_size, int max_col_size) : max_row_size(max_row_size), max_col_size(max_col_size) {$/;"	f	class:MyExcel::Table
Table	utility.h	/^class Table {$/;"	c	namespace:MyExcel
TextTable	excel_utility.cc	/^TextTable::TextTable(int row, int col) : Table(row, col) {}$/;"	f	class:MyExcel::TextTable
TextTable	utility.h	/^class TextTable : public Table {$/;"	c	namespace:MyExcel
Vector	excel_utility.cc	/^Vector::Vector(int n) : data(new std::string[n]), capacity(n), length(0) {}$/;"	f	class:MyExcel::Vector
Vector	utility.h	/^class Vector {$/;"	c	namespace:MyExcel
_UTILS_H	utility.h	2;"	d
capacity	utility.h	/^  int capacity;$/;"	m	class:MyExcel::Vector
cell	utility.h	/^class String cell : public Cell {$/;"	c	namespace:MyExcel
col_num_to_str	excel_utility.cc	/^std::string TextTable::col_num_to_str(int n) {$/;"	f	class:MyExcel::TextTable
current	utility.h	/^	Node* current;$/;"	m	class:MyExcel::NumStack
current	utility.h	/^	Node* current;$/;"	m	class:MyExcel::Stack
data	utility.h	/^	int data;$/;"	m	class:MyExcel::NumberCell
data	utility.h	/^	std::string data;$/;"	m	class:MyExcel::ExprCell
data	utility.h	/^	std::string data;$/;"	m	class:MyExcel::cell
data	utility.h	/^	std::string* data;$/;"	m	class:MyExcel::Vector
data	utility.h	/^	time_t data;$/;"	m	class:MyExcel::DateCell
data_base	utility.h	/^	Cell*** data_base;$/;"	m	class:MyExcel::Table
exp_vec	utility.h	/^	Vector exp_vec;$/;"	m	class:MyExcel::ExprCell
is_empty	excel_utility.cc	/^bool NumStack::is_empty() {$/;"	f	class:MyExcel::NumStack
is_empty	excel_utility.cc	/^bool Stack::is_empty() {$/;"	f	class:MyExcel::Stack
length	utility.h	/^  int length;$/;"	m	class:MyExcel::Vector
main	excel_main.cc	/^int main() {$/;"	f
max_col_size	utility.h	/^	int max_row_size, max_col_size;$/;"	m	class:MyExcel::Table
max_row_size	utility.h	/^	int max_row_size, max_col_size;$/;"	m	class:MyExcel::Table
operator <<	excel_utility.cc	/^std::ostream& operator<<(std::ostream& o, Table& table) {$/;"	f	namespace:MyExcel
operator []	excel_utility.cc	/^std::string Vector::operator[](int i) { return data[i]; }$/;"	f	class:MyExcel::Vector
parsed_expr	utility.h	/^	std::string* parsed_expr;$/;"	m	class:MyExcel::ExprCell
peek	excel_utility.cc	/^double NumStack::peek() { return current->s; }$/;"	f	class:MyExcel::NumStack
peek	excel_utility.cc	/^std::string Stack::peek() { return current->s; }$/;"	f	class:MyExcel::Stack
pop	excel_utility.cc	/^double NumStack::pop() {$/;"	f	class:MyExcel::NumStack
pop	excel_utility.cc	/^std::string Stack::pop() {$/;"	f	class:MyExcel::Stack
precedence	excel_utility.cc	/^int ExprCell::precedence(char c){}$/;"	f	class:MyExcel::ExprCell
prev	utility.h	/^		Node* prev;$/;"	m	struct:MyExcel::NumStack::Node
prev	utility.h	/^		Node* prev;$/;"	m	struct:MyExcel::Stack::Node
print_table	excel_utility.cc	/^std::string TextTable::print_table() {$/;"	f	class:MyExcel::TextTable
push	excel_utility.cc	/^void NumStack::push(double s) {$/;"	f	class:MyExcel::NumStack
push	excel_utility.cc	/^void Stack::push(std::string s) {$/;"	f	class:MyExcel::Stack
push_back	excel_utility.cc	/^void Vector::push_back(std::string s) {$/;"	f	class:MyExcel::Vector
reg_cell	excel_utility.cc	/^void Table::reg_cell(Cell* c, int row, int col) {$/;"	f	class:MyExcel::Table
remove	excel_utility.cc	/^void Vector::remove(int x) {$/;"	f	class:MyExcel::Vector
repeat_char	excel_utility.cc	/^std::string TextTable::repeat_char(int n, char c) {$/;"	f	class:MyExcel::TextTable
s	utility.h	/^		double s;$/;"	m	struct:MyExcel::NumStack::Node
s	utility.h	/^		std::string s;$/;"	m	struct:MyExcel::Stack::Node
size	excel_utility.cc	/^int Vector::size() { return length; }$/;"	f	class:MyExcel::Vector
start	utility.h	/^	Node start;$/;"	m	class:MyExcel::NumStack
start	utility.h	/^	Node start;$/;"	m	class:MyExcel::Stack
stringify	excel_utility.cc	/^std::string DateCell::stringify() {$/;"	f	class:MyExcel::DateCell
stringify	excel_utility.cc	/^std::string NumberCell::stringify() { return to_string(data); }$/;"	f	class:MyExcel::NumberCell
stringify	excel_utility.cc	/^std::string StringCell::stringify() { return data; }$/;"	f	class:MyExcel::StringCell
stringify	excel_utility.cc	/^std::string Table::stringify(const std::string& s) {$/;"	f	class:MyExcel::Table
stringify	excel_utility.cc	/^std::string Table::stringify(int row, int col) {$/;"	f	class:MyExcel::Table
table	utility.h	/^	Table* table;$/;"	m	class:MyExcel::Cell
to_numeric	excel_utility.cc	/^int DateCell::to_numeric() { return static_cast<int>(data); }$/;"	f	class:MyExcel::DateCell
to_numeric	excel_utility.cc	/^int NumberCell:: to_numeric() { return data; }$/;"	f	class:MyExcel::NumberCell
to_numeric	excel_utility.cc	/^int StringCell::to_numeric() { return 0; }$/;"	f	class:MyExcel::StringCell
to_numeric	excel_utility.cc	/^int Table::to_numeric(const std::string& s) {$/;"	f	class:MyExcel::Table
to_numeric	excel_utility.cc	/^int Table::to_numeric(int row, int col ) {$/;"	f	class:MyExcel::Table
x	utility.h	/^	int x, y;$/;"	m	class:MyExcel::Cell
y	utility.h	/^	int x, y;$/;"	m	class:MyExcel::Cell
~NumStack	excel_utility.cc	/^NumStack::~NumStack() {$/;"	f	class:MyExcel::NumStack
~Stack	excel_utility.cc	/^Stack::~Stack() {$/;"	f	class:MyExcel::Stack
~Table	excel_utility.cc	/^Table::~Table() {$/;"	f	class:MyExcel::Table
~Vector	excel_utility.cc	/^Vector::~Vector() {$/;"	f	class:MyExcel::Vector
